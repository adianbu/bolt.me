import React, { useState, useEffect } from 'react';
import { ArrowLeft, ExternalLink } from 'lucide-react';
import { Link } from 'react-router-dom';
import Header from '../components/Header';
import ExecutionSteps from '../components/ExecutionSteps';
import { FileExplorer } from '../components/FileExplorer';
import CodePreview from '../components/CodePreview';
import Button from '../components/ui/Button';
import { ExecutionStep, ProjectFile, FileItem } from '../types';

const ResultsPage: React.FC = () => {
  const [prompt, setPrompt] = useState<string>('');
  const [steps, setSteps] = useState<ExecutionStep[]>([]);
  const [files, setFiles] = useState<ProjectFile[]>([]);
  const [fileItems, setFileItems] = useState<FileItem[]>([]);
  const [selectedFile, setSelectedFile] = useState<ProjectFile | null>(null);
  const [currentStepId, setCurrentStepId] = useState<string | undefined>();
  const [isGenerating, setIsGenerating] = useState(true);
  
  // Add this line to initialize with mock files immediately
  useEffect(() => {
    setFiles(mockFiles);
    
    // Convert ProjectFile objects to FileItem objects
    const convertedFiles = mockFiles.map(file => ({
      name: file.name,
      path: file.path,
      content: file.content,
      type: 'file' as const
    }));
    
    setFileItems(convertedFiles);
  }, []);
  
  const mockFiles: ProjectFile[] = [
    {
      id: 'file1',
      name: 'index.html',
      path: 'src/index.html', // Remove leading slash
      content: '<!DOCTYPE html><html><head><title>My Website</title></head><body><h1>Hello, world!</h1></body></html>',
      language: 'html'
    },
    {
      id: 'file2',
      name: 'styles.css',
      path: 'src/css/styles.css', // Remove leading slash
      content: 'body { background-color: #f0f0f0; }',
      language: 'css'
    },
    {
      id: 'file3',
      name: 'script.js',
      path: 'src/js/script.js', // Remove leading slash
      content: 'console.log(\'Hello from JavaScript!\');',
      language: 'javascript'
    },
    {
      id: 'file4',
      name: 'app.js',
      path: 'src/js/app.js', // Remove leading slash
      content: 'document.addEventListener(\'DOMContentLoaded\', () => {\n  console.log(\'App initialized\');\n});',
      language: 'javascript'
    },
    {
      id: 'file5',
      name: 'reset.css',
      path: 'src/css/reset.css', // Remove leading slash
      content: '* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}',
      language: 'css'
    },
    {
      id: 'file6',
      name: 'README.md',
      path: 'README.md', // Remove leading slash
      content: '# Project\n\nThis is a sample project generated by WebCraft.',
      language: 'markdown'
    }
  ];


  useEffect(() => {
    // Enable dark mode
    document.documentElement.classList.add('dark');

    // Retrieve the prompt from local storage
    const savedPrompt = localStorage.getItem('currentPrompt');
    if (savedPrompt) {
      setPrompt(savedPrompt);
    }

    // Simulate the generation process
    const mockSteps: ExecutionStep[] = [
      {
        id: 'step1',
        title: 'Analyzing prompt',
        description: 'Breaking down requirements and planning site structure',
        status: 'completed',
        timestamp: new Date(Date.now() - 8000).toISOString()
      },
      {
        id: 'step2',
        title: 'Generating HTML structure',
        description: 'Creating semantic HTML layout and content',
        status: 'completed',
        timestamp: new Date(Date.now() - 6000).toISOString()
      },
      {
        id: 'step3',
        title: 'Styling with CSS',
        description: 'Applying responsive design and visual styling',
        status: 'completed',
        timestamp: new Date(Date.now() - 4000).toISOString()
      },
      {
        id: 'step4',
        title: 'Adding interactivity with JavaScript',
        description: 'Implementing smooth scrolling, form validation, and animations',
        status: 'completed',
        timestamp: new Date(Date.now() - 2000).toISOString()
      },
      {
        id: 'step5',
        title: 'Optimizing for performance',
        description: 'Minifying assets and optimizing loading speed',
        status: 'running',
        timestamp: new Date().toISOString()
      }
    ];

    // Simulate steps appearing over time
    let stepIndex = 0;
    const interval = setInterval(() => {
      if (stepIndex < mockSteps.length) {
        setSteps(prevSteps => [...prevSteps, mockSteps[stepIndex]]);
        setCurrentStepId(mockSteps[stepIndex].id);
        stepIndex++;
      } else {
        clearInterval(interval);
        
        // Inside the existing useEffect, keep this line
        setTimeout(() => {
          setSteps(prevSteps => 
            prevSteps.map((step, idx) => 
              idx === prevSteps.length - 1 
                ? { ...step, status: 'completed' } 
                : step
            )
          );
          setFiles(mockFiles); // Keep this line
          if (mockFiles.length > 0) {
            setSelectedFile(mockFiles[0]);
          }
          setIsGenerating(false);
        }, 2000);
      }
    }, 1500);

    return () => clearInterval(interval);
  }, []);

  return (
    <div className="min-h-screen bg-gray-900 flex flex-col">
      <Header />
      
      <main className="flex-grow pt-24 pb-12 px-4 container mx-auto">
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center">
            <Link to="/" className="text-gray-400 hover:text-blue-400 mr-4">
              <ArrowLeft className="h-5 w-5" />
            </Link>
            <h1 className="text-2xl font-bold text-white">Building Your Website</h1>
          </div>
          
          <div className="flex items-center">
            <Button 
              variant="outline" 
              className="mr-3"
              disabled={isGenerating}
              icon={<ExternalLink className="h-4 w-4" />}
            >
              Preview Site
            </Button>
            
            <Button 
              disabled={isGenerating}
            >
              Download Code
            </Button>
          </div>
        </div>
        
        {prompt && (
          <div className="bg-gray-800 border border-gray-700 rounded-lg p-4 mb-8 shadow-sm">
            <h2 className="text-sm font-medium text-gray-400 mb-2">Your Prompt</h2>
            <p className="text-gray-200">{prompt}</p>
          </div>
        )}
        
        <div className="flex flex-row gap-4 h-[calc(100vh-300px)]">
          {/* ExecutionSteps - 25% width */}
          <div className="w-1/4">
            <ExecutionSteps steps={steps} currentStepId={currentStepId} />
          </div>
          
          {/* FileExplorer - 25% width */}
          <div className="w-1/4">
            <FileExplorer 
              files={fileItems} 
              onFileSelect={(fileItem) => {
                // Find the corresponding ProjectFile
                const projectFile = files.find(f => f.path === fileItem.path) || null;
                setSelectedFile(projectFile);
              }} 
            />
          </div>
          
          {/* CodePreview - 50% width */}
          <div className="w-1/2">
            <CodePreview file={selectedFile} />
          </div>
        </div>
      </main>
    </div>
  );
};

export default ResultsPage;