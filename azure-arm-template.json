{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "defaultValue": "bolt-me",
      "metadata": {
        "description": "Name of the application"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "prod",
      "allowedValues": [
        "dev",
        "staging",
        "prod"
      ],
      "metadata": {
        "description": "Environment name"
      }
    },
    "costOptimizationLevel": {
      "type": "string",
      "defaultValue": "balanced",
      "allowedValues": [
        "minimal",
        "balanced",
        "performance"
      ],
      "metadata": {
        "description": "Cost optimization level: minimal (~$15/mo), balanced (~$25/mo), performance (~$40/mo)"
      }
    },
    "anthropicApiKey": {
      "type": "securestring",
      "metadata": {
        "description": "Anthropic API key for AI services"
      }
    },
    "geminiApiKey": {
      "type": "securestring",
      "metadata": {
        "description": "Google Gemini API key for AI services"
      }
    },
    "dockerRegistryUrl": {
      "type": "string",
      "defaultValue": "ghcr.io",
      "metadata": {
        "description": "Docker registry URL (e.g., ghcr.io for GitHub Container Registry)"
      }
    },
    "dockerRegistryUsername": {
      "type": "string",
      "metadata": {
        "description": "Docker registry username"
      }
    },
    "dockerRegistryPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Docker registry password or token"
      }
    },
    "frontendImageTag": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "Frontend container image tag"
      }
    },
    "backendImageTag": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "Backend container image tag"
      }
    },
    "enableAutoShutdown": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable auto-shutdown for non-production to save costs"
      }
    }
  },
  "variables": {
    "uniqueId": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
    "containerGroupName": "[concat(parameters('appName'), '-', parameters('environment'), '-', variables('uniqueId'))]",
    "dnsLabelPrefix": "[concat(parameters('appName'), '-', parameters('environment'), '-', variables('uniqueId'))]",
    
    // Cost optimization configurations
    "costConfigs": {
      "minimal": {
        "frontendCpu": 0.25,
        "frontendMemory": 0.5,
        "backendCpu": 0.5,
        "backendMemory": 1.0,
        "logRetentionDays": 7,
        "enableMonitoring": false,
        "storageAccountSku": "Standard_LRS"
      },
      "balanced": {
        "frontendCpu": 0.5,
        "frontendMemory": 1.0,
        "backendCpu": 0.75,
        "backendMemory": 1.5,
        "logRetentionDays": 14,
        "enableMonitoring": true,
        "storageAccountSku": "Standard_LRS"
      },
      "performance": {
        "frontendCpu": 1.0,
        "frontendMemory": 2.0,
        "backendCpu": 1.5,
        "backendMemory": 3.0,
        "logRetentionDays": 30,
        "enableMonitoring": true,
        "storageAccountSku": "Standard_GRS"
      }
    },
    "selectedConfig": "[variables('costConfigs')[parameters('costOptimizationLevel')]]",
    
    // Conditional resource names (only create if needed)
    "logAnalyticsName": "[if(variables('selectedConfig').enableMonitoring, concat(parameters('appName'), '-logs-', variables('uniqueId')), '')]",
    "appInsightsName": "[if(variables('selectedConfig').enableMonitoring, concat(parameters('appName'), '-insights-', variables('uniqueId')), '')]",
    "storageAccountName": "[concat('st', variables('uniqueId'))]"
  },
  "resources": [
    {
      "condition": "[equals(parameters('costOptimizationLevel'), 'performance')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('selectedConfig').storageAccountSku]"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "allowBlobPublicAccess": false,
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2"
      }
    },
    {
      "condition": "[variables('selectedConfig').enableMonitoring]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-12-01-preview",
      "name": "[variables('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": "[variables('selectedConfig').logRetentionDays]"
      }
    },
    {
      "condition": "[variables('selectedConfig').enableMonitoring]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      ],
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[if(variables('selectedConfig').enableMonitoring, resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName')), '')]"
      }
    },
    {
      "type": "Microsoft.ContainerInstance/containerGroups",
      "apiVersion": "2021-10-01",
      "name": "[variables('containerGroupName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      ],
      "properties": {
        "containers": [
          {
            "name": "frontend",
            "properties": {
              "image": "[concat(parameters('dockerRegistryUrl'), '/', parameters('dockerRegistryUsername'), '/bolt-frontend:', parameters('frontendImageTag'))]",
              "ports": [
                {
                  "port": 80,
                  "protocol": "TCP"
                }
              ],
              "environmentVariables": [
                {
                  "name": "VITE_API_URL",
                  "value": "http://localhost:3000"
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "[variables('selectedConfig').frontendCpu]",
                  "memoryInGB": "[variables('selectedConfig').frontendMemory]"
                }
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/health",
                  "port": 80
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 60,
                "timeoutSeconds": 10,
                "failureThreshold": 3
              }
            }
          },
          {
            "name": "backend",
            "properties": {
              "image": "[concat(parameters('dockerRegistryUrl'), '/', parameters('dockerRegistryUsername'), '/bolt-backend:', parameters('backendImageTag'))]",
              "ports": [
                {
                  "port": 3000,
                  "protocol": "TCP"
                }
              ],
              "environmentVariables": [
                {
                  "name": "NODE_ENV",
                  "value": "production"
                },
                {
                  "name": "PORT",
                  "value": "3000"
                },
                {
                  "name": "ANTHROPIC_API_KEY",
                  "secureValue": "[parameters('anthropicApiKey')]"
                },
                {
                  "name": "GEMINI_API_KEY",
                  "secureValue": "[parameters('geminiApiKey')]"
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "[variables('selectedConfig').backendCpu]",
                  "memoryInGB": "[variables('selectedConfig').backendMemory]"
                }
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/health",
                  "port": 3000
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 60,
                "timeoutSeconds": 10,
                "failureThreshold": 3
              }
            }
          }
        ],
        "osType": "Linux",
        "restartPolicy": "[if(parameters('enableAutoShutdown'), 'OnFailure', 'Always')]",
        "ipAddress": {
          "type": "Public",
          "ports": [
            {
              "protocol": "TCP",
              "port": 80
            }
          ],
          "dnsNameLabel": "[variables('dnsLabelPrefix')]"
        },
        "imageRegistryCredentials": [
          {
            "server": "[parameters('dockerRegistryUrl')]",
            "username": "[parameters('dockerRegistryUsername')]",
            "password": "[parameters('dockerRegistryPassword')]"
          }
        ],
        "diagnostics": "[if(variables('selectedConfig').enableMonitoring, createObject('logAnalytics', createObject('workspaceId', reference(variables('logAnalyticsName')).customerId, 'workspaceKey', listKeys(variables('logAnalyticsName'), '2021-12-01-preview').primarySharedKey)), createObject())]"
      }
    }
  ],
  "outputs": {
    "containerGroupFqdn": {
      "type": "string",
      "value": "[reference(variables('containerGroupName')).ipAddress.fqdn]"
    },
    "containerGroupIpAddress": {
      "type": "string",
      "value": "[reference(variables('containerGroupName')).ipAddress.ip]"
    },
    "estimatedMonthlyCost": {
      "type": "string",
      "value": "[if(equals(parameters('costOptimizationLevel'), 'minimal'), '$15-20', if(equals(parameters('costOptimizationLevel'), 'balanced'), '$20-30', '$35-50'))]"
    },
    "costOptimizationLevel": {
      "type": "string",
      "value": "[parameters('costOptimizationLevel')]"
    },
    "resourcesSummary": {
      "type": "object",
      "value": {
        "frontendResources": {
          "cpu": "[variables('selectedConfig').frontendCpu]",
          "memory": "[concat(variables('selectedConfig').frontendMemory, 'GB')]"
        },
        "backendResources": {
          "cpu": "[variables('selectedConfig').backendCpu]",
          "memory": "[concat(variables('selectedConfig').backendMemory, 'GB')]"
        },
        "monitoringEnabled": "[variables('selectedConfig').enableMonitoring]",
        "logRetentionDays": "[variables('selectedConfig').logRetentionDays]"
      }
    }
  }
}